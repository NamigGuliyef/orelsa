import { MailerService } from '@nestjs-modules/mailer';
import { HttpException, HttpStatus, Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { model, Model } from 'mongoose';
import { CreateContact } from '../contact/dto/contact.dto';
import { Contact } from '../contact/model/contact.schema';
import { HomeBrowseRange, HomeNewCollection } from '../home_page/model/home.schema';
import { Product } from '../product/model/product.schema';
import { createSubscribeDto } from '../subscribe/dto/subscribe.dto';
import { Subscribe } from '../subscribe/model/subscribe.schema';
import { MessageResponse } from '../utils/messagetype';
import { productSearch } from './query.types';

@Injectable()
export class GuestService {
  constructor(@InjectModel('subscribe') private readonly subscribeModel: Model<Subscribe>,
    @InjectModel('contact') private readonly contactModel: Model<Contact>,
    @InjectModel('product') private readonly productModel: Model<Product>,
    @InjectModel('home-newCollection') private readonly homeNewCollectionModel: Model<HomeNewCollection>,
    @InjectModel('home-browseRange') private readonly homeBrowseRangeModel: Model<HomeBrowseRange>,
    private mailerService: MailerService
  ) { }

  // subscribe
  async subscribe(CreateSubscribeDto: createSubscribeDto): Promise<MessageResponse> {
    const existEmail = await this.subscribeModel.findOne({ email: CreateSubscribeDto.email })
    if (existEmail) {
      throw new HttpException('Qeyd etdiyiniz mail adresi il…ô artƒ±q abun…ô olmusunuz.', HttpStatus.CONFLICT)
    }
    await this.subscribeModel.create(CreateSubscribeDto)
    this.mailerService.sendMail({
      from: `${CreateSubscribeDto.email}`,
      to: 'orelsacosmetics@gmail.com',
      subject: 'Yeni abun…ôlik',
      text: `Yeni abun…ôlik: ${CreateSubscribeDto.email}`
    })
    return { message: 'Abunl…ôyiniz √º√ß√ºn t…ô≈ü…ôkk√ºr edirik üôè' }
  }


  // Biziml…ô …ôlaq…ô b√∂lm…ôsinin doldurulmasƒ±
  async contactUs(createContact: CreateContact): Promise<MessageResponse> {
    const { name, email } = createContact
    const contactUs = await this.contactModel.findOne({ name, email })
    if (contactUs) throw new HttpException('Artƒ±q sizin m…ôlumatlarƒ±nƒ±z bizim bazada m√∂vcuddur.Tezlikl…ô geri d√∂n√º≈ü edil…ôc…ôkdir.', HttpStatus.CONFLICT)
    await this.contactModel.create(createContact)
    return { message: "Sizinl…ô tezlikl…ô …ôlaq…ô saxlanacaq. M…ôlumatƒ±nƒ±z √º√ß√ºn t…ô≈ü…ôkk√ºr edirik." }
  }



  // B√ºt√ºn m…ôhsullarƒ± g…ôtir
  async getAllProduct(): Promise<Product[]> {
    return await this.productModel.find({ active: true })
  }


  // ƒ∞D -sin…ô g√∂r…ô g…ôtir
  async getSingleProduct(_id: string): Promise<Product> {
    return await this.productModel.findById(_id)
  }


  // Home page - yeni kolleksiya b√∂lm…ôsind…ô datalara baxƒ±≈ü
  async getAllNewCollection(): Promise<HomeNewCollection[]> {
    return await this.homeNewCollectionModel.find({ active: true })
  }


  // Home page - se√ßilmi≈ü kateqoriyalar b√∂lm…ôsind…ô datalara baxƒ±≈ü
  async getAllBrowseRange(): Promise<HomeBrowseRange[]> {
    return await this.homeBrowseRangeModel.find()
  }


  // category -sin…ô aid m…ôhsullar g…ôlsin
  async getProductByCategory(_id: string): Promise<Product[]> {
    const product = await this.productModel.findById(_id)
    return await this.productModel.find({ category: product.category })
  }


  // category filter
  async productSearch(ProductSearch: productSearch): Promise<Product[]> {
    const { name, description, model_no, category } = ProductSearch
    const filter: any = {}
    if (name) filter.name = { $regex: name, $options: 'i' }
    if (description) filter.description = { $regex: description, $options: 'i' }
    if (model_no) filter.model_no = { $regex: model_no, $options: 'i' }
    if (category) filter.category = { $regex: category, $options: 'i' }
    return await this.productModel.find(filter)
  }

}
